@page "/residashboard"


@using Bimorph.WebApi.Core
@using Bimorph.WebApi.Core.Types
@using ChartJs.Blazor.Common
@inject BimorphAPIClientService BimorphApiClientService
@inject BimorphTypeFactory BimorphTypeFactory
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using System.Drawing
@using ChartJs.Blazor.Common.Enums
@using ResiWebApp.Core
@using ResiWebApp.Core.Extensions
@using System.Collections.ObjectModel
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Server.IIS.Core





<h1>Residential Areas Data Dashboard</h1>

<br />
<br />

<p>Fetch a Revit data file.</p>

<br />
<br />


<MatThemeProvider Theme="@Theme1">

    <div>

        <MatTextField @bind-Value="@BimorphId" Label="Data Stream Id"></MatTextField>

        <MatButton OnClick="this.FetchDataCollectionFromServer" Raised="true">Fetch </MatButton>

    </div>

    <div>
        <MatCheckbox @bind-Value="@UseLatestStreamId" Label="Get latest stream Id"></MatCheckbox>
    </div>
</MatThemeProvider>


<br />
<br />
<br />


@if (bimorphAreaObjects.Count != 0)
{

    <MatThemeProvider Theme="@Theme1">


        <MatSelectItem @bind-Value="SelectedCategory" Items="_categoryTypes" Label="Category type" />


        <MatTextField Icon="filter_alt" @bind-Value="@ValueToFilterBy" Label="Filter by value"></MatTextField>

        <br />
        <br />
        <br />

        <MatTable Items="@bimorphAreaObjects">
            <MatTableHeader>

                @foreach (var categoryType in _categoryTypes)
                {
                    <th>@categoryType </th>
                }


            </MatTableHeader>
            <MatTableRow>


                @foreach (var parameter in context.Parameters)
                    {

                    <td>@parameter.Value </td>
                    }


            </MatTableRow>
        </MatTable>

    </MatThemeProvider>

    <br />
    <br />
    <br />

    //<Chart Config="@_config"></Chart>
}



@code {

    private PieConfig _config;

    private List<BimorphArea> _bimorphAreaCache = new List<BimorphArea>();

    [Parameter]
    public string BimorphId { get; set; }

    private string _valueToFilterBy;

    [Parameter]
    public string ValueToFilterBy
    {
        get => _valueToFilterBy;

        set
        {
            _valueToFilterBy = value;


            this.Filter();

            this.CreateAreaPieChart();

        }
    }

    [Parameter]
    public bool UseLatestStreamId { get; set; }


    IList<IBimorphObject> BimorphObjects;

    List<BimorphArea> bimorphAreaObjects = new List<BimorphArea>();

    List<double> areas = new List<double>();

    private IReadOnlyList<string> _categoryTypes;

    private string _selectedCat;

    [Parameter]
    public string SelectedCategory
    {
        get => _selectedCat;

        set
        {
            _selectedCat = value;
        }
    }


    private void Filter()
    {
        var filteredObjects = new List<BimorphArea>();

        bool isValueToFilterByValid = ValueToFilterBy != null && ValueToFilterBy != " " && ValueToFilterBy != "";

        foreach (var bimorphArea in _bimorphAreaCache)
        {

            if (!isValueToFilterByValid)
            {
                bimorphAreaObjects = _bimorphAreaCache;

                break;
            }

            var parameters = bimorphArea.Parameters;

            var selectedCategoryParams = parameters
                .Where(p => p.Name == SelectedCategory);


            var paramsWithDesiredValues = selectedCategoryParams
                .Where(p => (string)p.Value == ValueToFilterBy);

            if (paramsWithDesiredValues.Any())
            {
                filteredObjects.Add(bimorphArea);
            }

        }

        if (isValueToFilterByValid)
            bimorphAreaObjects = filteredObjects;
    }



    public void FetchDataCollectionFromServer()
    {


        string jObject;

        bool extractedCategories = false;

        if (UseLatestStreamId)
        {
            string urlGetLatest = ApiEndPoints.GetLatestNodeCollectionEndPoint;

            jObject = BimorphApiClientService.GetRequest(urlGetLatest);

            BimorphObjects = BimorphTypeFactory.CreateBimorphObjects(jObject);

            foreach (var bimorphObject in BimorphObjects)
            {
                if (bimorphObject is BimorphArea area)
                {
                    bimorphAreaObjects.Add(area);

                    _bimorphAreaCache.Add(area);

                    if (extractedCategories) continue;

                    _categoryTypes = new ReadOnlyCollection<string>(this.ExtractCategoriesForTable(area));

                    extractedCategories = true;
                }

            }

        }

        else
        {
            string urlGetBy = ApiEndPoints.GetNodeCollectionByIdEndPoint + BimorphId;

            jObject = BimorphApiClientService.GetRequest(urlGetBy);

            BimorphObjects = BimorphTypeFactory.CreateBimorphObjects(jObject);

            foreach (var bimorphObject in BimorphObjects)
            {
                if (bimorphObject is BimorphArea area)
                {
                    bimorphAreaObjects.Add(area);

                    _bimorphAreaCache.Add(area);

                    if (extractedCategories) continue;

                    _categoryTypes = new ReadOnlyCollection<string>(this.ExtractCategoriesForTable(area));

                    extractedCategories = true;
                }
            }
        }



        this.CreateAreaPieChart();

    }

    /// <summary>
    /// Extracts all the column header categories that will be available
    /// </summary>
    /// <param name="bimorphObject"></param>
    /// <returns></returns>
    private IList<string> ExtractCategoriesForTable(BimorphArea bimorphObject)
    {
        IList<string> categoryTypesTemp = new List<string>();

        var parameters = bimorphObject.Parameters;

        foreach (var parameter in parameters)
        {

            string categoryNameCamelcase = parameter.Name;


            if (!categoryTypesTemp.Contains(categoryNameCamelcase))
                categoryTypesTemp.Add(categoryNameCamelcase);
        }

        return categoryTypesTemp;
    }



    private void CreateAreaPieChart()
    {

        this.ConfigurePiChart();

        this.CreatePieChartLabels();

        this.CreatePieChartDataSet(areas);


    }


    private void ConfigurePiChart()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                //AspectRatio = 3,


                Legend = new Legend
                {
                    Display = true,
                    FullWidth = false,
                    Position = Position.Left


                },

                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Areas by unit types",
                    FontStyle = FontStyle.Normal,
                    FontSize = 15,
                    Position = Position.Top,
                    Padding = 70
                }

            }
        };
    }

    private void CreatePieChartLabels()
    {
        foreach (var bimorphArea in bimorphAreaObjects)
        {

            var parameters = bimorphArea.Parameters;

            var unitTypeParameter = parameters.Find(p => p.Name == "Unit Type");
            string unitTypeValue = (string)unitTypeParameter.Value;

            var areaParameter = parameters.Find(p => p.Name == "Area");
            string areaValue = (string)areaParameter.Value;

            var areaCharArray = areaValue.ToCharArray();

            var filtered = areaCharArray.Where(c => char.IsDigit(c)).ToArray();

            if (double.TryParse(filtered, out double result))
            {
                if (unitTypeValue == null || unitTypeValue == " " || unitTypeValue == "")
                    continue;

                areas.Add(result);

                _config.Data.Labels.Add(unitTypeValue);
            }


        }

    }


    private void CreatePieChartDataSet(IList<double> data)
    {
        PieDataset<double> areaDataSet = new PieDataset<double>(data);

        double totalAreaObjects = data.Count;

        var colors = new string[data.Count];

        var colorToLerpFrom = Color.FromArgb(255, 170, 0, 200);

        var colorToLerpTo = Color.FromArgb(255, 8, 130, 212);

        for (int i = 0; i < totalAreaObjects; i++)
        {
            double t = i / totalAreaObjects;

            var color = colorToLerpFrom.LerpTo(colorToLerpTo, t);

            string colorHex = ColorUtil.ColorHexString(color.R, color.G, color.G);

            colors[i] = colorHex;
        }

        areaDataSet.BackgroundColor = colors;

        _config.Data.Datasets.Add(areaDataSet);
    }

    public MatTheme Theme1;
    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Theme1 = new MatTheme()
        {
            Primary = MatThemeColors.DeepOrange._500.Value,
            Secondary = MatThemeColors.DeepOrange._500.Value,

        };

    }

}
